#!/bin/bash

# Colors for terminal output
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[36m"
PLAIN="\033[0m"

# Define global variables
CONFIG_FILE="/usr/local/etc/xray/config.json"
DEFAULT_PORT=443
DEFAULT_DNS="1.1.1.1"
DEFAULT_DEST="www.microsoft.com:443"

# Function to print colorful messages
function print_ok() {
    echo -e "${GREEN}[OK]${PLAIN} $1"
}

function print_error() {
    echo -e "${RED}[ERROR]${PLAIN} $1"
}

function print_info() {
    echo -e "${YELLOW}[INFO]${PLAIN} $1"
}

# Check if user is root
function check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root"
        exit 1
    fi
}

# Check system compatibility
function check_system() {
    if [[ -f /etc/redhat-release ]]; then
        RELEASE="centos"
    elif grep -q -E -i "debian" /etc/issue; then
        RELEASE="debian"
    elif grep -q -E -i "ubuntu" /etc/issue; then
        RELEASE="ubuntu"
    elif grep -q -E -i "centos|red hat|redhat" /etc/issue; then
        RELEASE="centos"
    elif grep -q -E -i "debian|ubuntu" /proc/version; then
        RELEASE="debian"
    elif grep -q -E -i "centos|red hat|redhat" /proc/version; then
        RELEASE="centos"
    else
        print_error "System not supported. Please use Ubuntu, Debian, or CentOS"
        exit 1
    fi
    
    # Check if system is 64-bit
    if [[ ! -z $(uname -a | grep x86_64) ]]; then
        ARCH="amd64"
    elif [[ ! -z $(uname -a | grep aarch64) ]]; then
        ARCH="arm64"
    else
        print_error "Unsupported architecture. Only x86_64 and arm64 are supported"
        exit 1
    fi
}

# Install necessary packages
function install_dependencies() {
    print_info "Installing necessary dependencies..."
    
    if [[ $RELEASE == "debian" || $RELEASE == "ubuntu" ]]; then
        apt-get update
        apt-get install -y curl wget unzip jq ufw
    elif [[ $RELEASE == "centos" ]]; then
        yum update -y
        yum install -y curl wget unzip jq firewalld
    fi
    
    print_ok "Dependencies installed successfully"
}

# Download and install Xray
function install_xray() {
    print_info "Installing Xray..."
    
    # Create directory
    mkdir -p /usr/local/etc/xray
    
    # Download latest release
    bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install
    
    print_ok "Xray installed successfully"
}

# Generate necessary keys and IDs
function generate_keys() {
    print_info "Generating keys and IDs..."
    
    # Generate private key and public key
    x25519_private_key=$(xray x25519)
    private_key=$(echo "$x25519_private_key" | grep "Private key:" | awk '{print $3}')
    public_key=$(echo "$x25519_private_key" | grep "Public key:" | awk '{print $3}')
    
    # Generate UUID
    UUID=$(xray uuid)
    
    print_ok "Keys and IDs generated successfully"
}

# Configure Xray
function configure_xray() {
    print_info "Configuring Xray..."
    
    # Get external IP
    external_ip=$(curl -s https://api.ipify.org)
    
    # Get configuration parameters
    read -p "Enter the port for Xray (default: $DEFAULT_PORT): " PORT
    PORT=${PORT:-$DEFAULT_PORT}
    
    read -p "Enter the DNS server (default: $DEFAULT_DNS): " DNS
    DNS=${DNS:-$DEFAULT_DNS}
    
    read -p "Enter the destination server for REALITY (default: $DEFAULT_DEST): " DEST_SERVER
    DEST_SERVER=${DEST_SERVER:-$DEFAULT_DEST}
    
    # Generate server name list
    SERVER_NAMES=$(echo $DEST_SERVER | awk -F: '{print $1}')
    
    # Create basic configuration
    cat > $CONFIG_FILE << EOF
{
  "log": {
    "loglevel": "warning",
    "access": "/var/log/xray/access.log",
    "error": "/var/log/xray/error.log"
  },
  "inbounds": [
    {
      "port": $PORT,
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "$UUID",
            "flow": "xtls-rprx-vision"
          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "$DEST_SERVER",
          "xver": 0,
          "serverNames": [
            "$SERVER_NAMES"
          ],
          "privateKey": "$private_key",
          "shortIds": [
            ""
          ]
        }
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    },
    {
      "port": $((PORT+1)),
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "$UUID"
          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "none"
      },
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {
        "domainStrategy": "UseIPv4"
      },
      "tag": "direct"
    },
    {
      "protocol": "blackhole",
      "tag": "blocked"
    },
    {
      "protocol": "dns",
      "tag": "dns-out"
    }
  ],
  "dns": {
    "servers": [
      "$DNS"
    ]
  },
  "routing": {
    "domainStrategy": "IPIfNonMatch",
    "rules": [
      {
        "type": "field",
        "inboundTag": [
          "dns-in"


# Configure firewall
function configure_firewall() {
    print_info "Configuring firewall..."
    
    if [[ $RELEASE == "debian" || $RELEASE == "ubuntu" ]]; then
        ufw allow $PORT/tcp
        ufw allow $((PORT+1))/tcp
        ufw --force enable
    elif [[ $RELEASE == "centos" ]]; then
        systemctl start firewalld
        systemctl enable firewalld
        firewall-cmd --permanent --add-port=$PORT/tcp
        firewall-cmd --permanent --add-port=$((PORT+1))/tcp
        firewall-cmd --reload
    fi
    
    print_ok "Firewall configured successfully"
}

# Start and enable Xray service
function start_xray() {
    print_info "Starting Xray service..."
    
    systemctl daemon-reload
    systemctl enable xray
    systemctl restart xray
    
    # Check if service is running
    if systemctl is-active --quiet xray; then
        print_ok "Xray service started successfully"
    else
        print_error "Failed to start Xray service"
        exit 1
    fi
}

# Generate and display configuration information
function show_config() {
    print_info "Generating client configuration..."
    
    external_ip=$(curl -s https://api.ipify.org)
    
    echo -e "${GREEN}======== Xray VLESS Configuration ========${PLAIN}"
    echo -e "${YELLOW}TLS Configuration:${PLAIN}"
    echo -e "Address: ${GREEN}$external_ip${PLAIN}"
    echo -e "Port: ${GREEN}$PORT${PLAIN}"
    echo -e "Protocol: ${GREEN}VLESS${PLAIN}"
    echo -e "UUID: ${GREEN}$UUID${PLAIN}"
    echo -e "Flow: ${GREEN}xtls-rprx-vision${PLAIN}"
    echo -e "Security: ${GREEN}reality${PLAIN}"
    echo -e "SNI: ${GREEN}$SERVER_NAMES${PLAIN}"
    echo -e "Public Key: ${GREEN}$public_key${PLAIN}"
    echo -e "Fingerprint: ${GREEN}chrome${PLAIN}"
    echo -e "SpiderX: ${GREEN}/${PLAIN}"
    
    echo -e "\n${YELLOW}Non-TLS Configuration:${PLAIN}"
    echo -e "Address: ${GREEN}$external_ip${PLAIN}"
    echo -e "Port: ${GREEN}$((PORT+1))${PLAIN}"
    echo -e "Protocol: ${GREEN}VLESS${PLAIN}"
    echo -e "UUID: ${GREEN}$UUID${PLAIN}"
    echo -e "Security: ${GREEN}none${PLAIN}"
    
    echo -e "\n${YELLOW}REALITY Share Link:${PLAIN}"
    REALITY_LINK="vless://$UUID@$external_ip:$PORT?encryption=none&flow=xtls-rprx-vision&security=reality&sni=$SERVER_NAMES&fp=chrome&pbk=$public_key&sid=&spx=%2F&type=tcp&headerType=none#REALITY-XRAY"
    echo -e "${GREEN}$REALITY_LINK${PLAIN}"
    
    echo -e "\n${YELLOW}Non-TLS Share Link:${PLAIN}"
    NON_TLS_LINK="vless://$UUID@$external_ip:$((PORT+1))?encryption=none&security=none&type=tcp&headerType=none#NON-TLS-XRAY"
    echo -e "${GREEN}$NON_TLS_LINK${PLAIN}"
}

# Function to add a new user to the config
function add_user() {
    read -p "Enter username for the new user: " new_username
    if [[ -z "$new_username" ]]; then
        print_error "Username cannot be empty"
        return
    fi
    
    # Generate UUID for the new user
    new_uuid=$(xray uuid)
    
    print_info "Adding new user: $new_username with UUID: $new_uuid"
    
    # Add user to TLS configuration
    jq ".inbounds[0].settings.clients += [{\"id\": \"$new_uuid\", \"flow\": \"xtls-rprx-vision\", \"email\": \"$new_username@example.com\"}]" $CONFIG_FILE > /tmp/config.tmp
    mv /tmp/config.tmp $CONFIG_FILE
    
    # Add user to non-TLS configuration
    jq ".inbounds[1].settings.clients += [{\"id\": \"$new_uuid\", \"email\": \"$new_username@example.com\"}]" $CONFIG_FILE > /tmp/config.tmp
    mv /tmp/config.tmp $CONFIG_FILE
    
    # Restart Xray to apply changes
    systemctl restart xray
    
    # Generate links for the new user
    external_ip=$(curl -s https://api.ipify.org)
    server_names=$(jq -r '.inbounds[0].streamSettings.realitySettings.serverNames[0]' $CONFIG_FILE)
    public_key=$(jq -r '.inbounds[0].streamSettings.realitySettings.privateKey' $CONFIG_FILE | xargs -I {} xray x25519 -i {} | grep "Public key:" | awk '{print $3}')
    
    echo -e "\n${GREEN}======== Configuration for $new_username ========${PLAIN}"
    echo -e "${YELLOW}TLS Configuration:${PLAIN}"
    echo -e "UUID: ${GREEN}$new_uuid${PLAIN}"
    
    echo -e "\n${YELLOW}REALITY Share Link:${PLAIN}"
    REALITY_LINK="vless://$new_uuid@$external_ip:$PORT?encryption=none&flow=xtls-rprx-vision&security=reality&sni=$server_names&fp=chrome&pbk=$public_key&sid=&spx=%2F&type=tcp&headerType=none#REALITY-XRAY-$new_username"
    echo -e "${GREEN}$REALITY_LINK${PLAIN}"
    
    echo -e "\n${YELLOW}Non-TLS Share Link:${PLAIN}"
    NON_TLS_LINK="vless://$new_uuid@$external_ip:$((PORT+1))?encryption=none&security=none&type=tcp&headerType=none#NON-TLS-XRAY-$new_username"
    echo -e "${GREEN}$NON_TLS_LINK${PLAIN}"
    
    print_ok "User $new_username added successfully"
}

# List all users
function list_users() {
    print_info "Listing all users..."
    
    # Get users from TLS configuration
    users=$(jq -r '.inbounds[0].settings.clients[] | "\(.email // "No Email"): \(.id)"' $CONFIG_FILE)
    
    echo -e "${GREEN}======== User List ========${PLAIN}"
    echo -e "$users"
}

# Delete a user
function delete_user() {
    print_info "Deleting a user..."
    
    # List users first
    list_users
    
    read -p "Enter the UUID of the user to delete: " uuid_to_delete
    
    # Delete from TLS configuration
    jq "(.inbounds[0].settings.clients) |= map(select(.id != \"$uuid_to_delete\"))" $CONFIG_FILE > /tmp/config.tmp
    mv /tmp/config.tmp $CONFIG_FILE
    
    # Delete from non-TLS configuration
    jq "(.inbounds[1].settings.clients) |= map(select(.id != \"$uuid_to_delete\"))" $CONFIG_FILE > /tmp/config.tmp
    mv /tmp/config.tmp $CONFIG_FILE
    
    # Restart Xray to apply changes
    systemctl restart xray
    
    print_ok "User with UUID $uuid_to_delete deleted successfully"
}

# Function to install everything
function install_all() {
    check_root
    check_system
    install_dependencies
    install_xray
    generate_keys
    configure_xray
    configure_firewall
    start_xray
    show_config
}

# Main menu
function show_menu() {
    echo -e "${GREEN}======== Xray VLESS REALITY Management ========${PLAIN}"
    echo -e "${GREEN}1.${PLAIN} Install Xray VLESS with REALITY"
    echo -e "${GREEN}2.${PLAIN} Add new user"
    echo -e "${GREEN}3.${PLAIN} List all users"
    echo -e "${GREEN}4.${PLAIN} Delete a user"
    echo -e "${GREEN}5.${PLAIN} Show configuration"
    echo -e "${GREEN}6.${PLAIN} Exit"
    
    read -p "Please enter your choice (1-6): " choice
    
    case $choice in
        1) install_all ;;
        2) add_user ;;
        3) list_users ;;
        4) delete_user ;;
        5) show_config ;;
        6) exit 0 ;;
        *) print_error "Invalid choice. Please try again." && show_menu ;;
    esac
    
    # Return to menu after operation
    read -p "Press Enter to continue..."
    show_menu
}

# Main
show_menu
